<form class="needs-validation" id="justValidateForm" action="./database/login.php" method="POST">
  <div class="container mb-5 mt-5 pt-5">
    <div class="row">
      <div class="col-12">
        <h1>Login form</h1>
        <hr>
      </div>
    </div>
  </div>
  <div class="form-group">
        <label for="exampleInputText">Username</label>
        <input type="text" name="USERNAME" class="form-control" id="exampleInputText">
  </div>
    <div class="form-group">
        <label for="exampleInputEmail1">Email</label>
        <input type="email" name="EMAIL" class="form-control" id="exampleInputEmail1">
    </div>
    <div class="form-group">
        <label for="exampleInputPassword">Password</label> <!-- con label, placeholder e testo di aiuto -->
        <input type="password" name="PASSWORD" class="form-control input-password" id="exampleInputPassword" aria-labelledby="infoPassword">
        <span class="password-icon" aria-hidden="true">
            <svg class="password-icon-visible icon icon-sm"><use href="/bootstrap-italia/svg/sprite.svg#it-password-visible"></use></svg>
            <svg class="password-icon-invisible icon icon-sm d-none"><use href="/bootstrap-italia/svg/sprite.svg#it-password-invisible"></use></svg>
        </span>
    </div>
    <button class="btn btn-primary mt-3" type="submit">Sign in</button>
</form>
<!-- Login with SSO -->

<!-- Login with Auth Services -->

<!-- Implement Two-Factors Auth -->

<!-- Implement CAPTCHA for defense the web site from Brute Force attack -->

<!-- List of type of attack can be performed in this form -->
<div class="container mb-3 mt-3 pt-3">
  <h5>SQLi - SQL Injection attack</h5>
  <p> Step per effettuare un SQLi attack</p>
  <ul>
    <li> 1. ...</li>
    <li> 2. ...</li>
    <li> 3. ...</li>
  </ul>

  <h5>XSS - Cross/site scripting attack</h5>
  <p> Step per effettuare un XSS attack</p>
  <ul>
    <li> 1. ...</li>
    <li> 2. ...</li>
    <li> 3. ...</li>
  </ul>
</div>

<!--
<script>
    document.addEventListener("DOMContentLoaded", function() {
      const validate = new window.JustValidateIt('#justValidateForm', {
        errorFieldCssClass: 'is-invalid',
        errorLabelCssClass: 'form-feedback',
        errorLabelStyle: '',
        focusInvalidField: true,
    });
    
    validate
        .addField('#validationCustom01', [
          {
            rule: 'required',
            errorMessage: 'Questo campo è richiesto'
          },
        ])
        .addField('#validationCustom02', [
          {
            rule: 'required',
            errorMessage: 'Questo campo è richiesto'
          },
        ])
        .addField('#validationCustom03', [
          {
            rule: 'required',
            errorMessage: 'Questo campo è richiesto'
          },
        ])
        .addField('#validationCustom04', [
          {
            rule: 'required',
            errorMessage: 'Questo campo è richiesto'
          },
        ])
        .addField('#validationCustomUsername', [
          {
            rule: 'required',
            errorMessage: 'Questo campo è richiesto'
          },
        ])
        .addField('#validationAge', [
          {
            rule: 'required',
            errorMessage: 'Questo campo è richiesto'
          },
          {
            rule: 'minNumber',
            value: 18,
            errorMessage: 'Deve essere maggiore di 17'
          },
        ])
        .addField('#validationCustom05', [
          {
            rule: 'required',
            errorMessage: 'Questo campo è richiesto'
          },
          {
            rule: 'minLength',
            value: 5,
            errorMessage: 'Inserire 5 cifre'
          },
          {
            rule: 'maxLength',
            value: 5,
            errorMessage: 'Inserire 5 cifre'
          },
          {
            rule: 'number',
            errorMessage: 'Inserire un numero'
          },
        ])
        .addField('#invalidCheck', [
          {
            rule: 'required',
            errorMessage: 'Questo campo è richiesto'
          },
        ])
    })
</script> -->